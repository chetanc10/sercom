# Any line in scom file falls under one of the following categories:
# 1. scom command - command to control sercom execution (marked as SCOM_KNOWN)
# 2. comment - Any line starting with '#' is treated as don't care
# 3. modem command - if any line is uncommented and is not SCOM_KNOWN, then it is treated as modem command and sent out to modem. So scom writer MUST ENSURE that only modem commands are uncommented and any other alhpanumeric sequence like explanation, description, unwanted-modem-command, etc are commented
#
# SCOM_KNOWN: scom_enman
# When script encounters above cmd at start of a new line, ManualCmd mode is enabled and Scom mode will be stopped
#
# SCOM_KNOWN: scom_enscom <path-including-scom-file.scom>
# When script encounters above cmd at start of a new line, and if the file-path is valid, Scom mode is kept in alive to execute commands from the new scom file
#
# SCOM_KNOWN: scom_break
# When script encounters above cmd at start of a new line, it stops current Scom mode - any further commands in file will not be read/executed. It's like a repositionable EOF and can be used during development of advanced Scom test sequences in scom files.
#
# SCOM_KNOWN: scom_loopbegin [iter=number-of-iterations]
# When script encounters above cmd at start of a new line, it understands a loop is needed and optionally notes down the number of iterations and breaks the loop after that number of iterations, if given
#
# SCOM_KNOWN: scom_loopend
# When script encounters above cmd at start of a new line, it notes down loop-iteration-ending.
#
# SCOM_KNOWN: scom_sleep <n>[.m]
# When script encounters above cmd at start of a new line, it sleeps for n seconds and optionally for m milliseconds, if specified. Default sleep time is 1
#
# SCOM_KNOWN: scom_expect <substring>
# When script encounters above cmd at start of a new line, it tries to match the response buffer of immediately previous modem command. scom supports just one 'scom_expect' per modem command
#
# So if any of the SCOM_KNOWN commands are encountered (and validated), the script may then stop reading further from the current scom file as it switches to different mode accordingly.
#

# A good thing to have for any test is to log the version info of SW and HW as much as possible 
at#swpkgv

# Next good thing to do is to enable verbose error reporting
at+cmee=2

# Get various environment details now from the modem
# - Serial Interface Configuuration
# - USB Configuration
# - Port Configuration
at#usbcfg?
at#portcfg?

# Now we start a sequence of commands to achieve/use a specific functionality
#at#connmgrstart=1,0
#at#isel=1
#at#wlanmode=1
#at#wlanstart=1

# A definitive loop now iterating for 10 times
scom_loopbegin iter=2
at#wlanscan=0
scom_sleep 0.5
scom_loopend

# Uncomment the following to enable ManualCmd mode for manually enter commands
#enman

# Trying an non-existent scom file to see how script reacts
scom_enscom 1.scom

# Break the Scom session and any command after scom_break will not be executed!
scom_break

########## ALL THE FOLLOWING ARE NOT EXECUTED SINCE WE GAVE 'scom_break' above

# Demo Chaining of scom
scom_enscom child.scom

at#rndis?

# This is just an example to help understand scom for an automated and large number of tests divided/grouped as per feature/test-case
scom_enscom ~/softap/security/openap.scom
scom_enscom ~/station/security/wpa2.scom

# We have multiple methods to run multiple scoms in one run as described below.
#
# 1. FIFO Model - Simply have a mother scom file calling to multiple children scom files with scom_enscom command in required order. In a simple FIFO-model child scom file(s) will not contain scom_enscom command.
# e.g. FIFO Model below
# example.scom is mother scom with following lines
scom_enscom openap.scom
scom_enscom wpa2ap.scom
scom_enscom wpa3ap.scom
# For above, script sees 'scom_enscom openap.scom' and switches to openap.scom and once openap.scom completes, it comes back to open mother scom (example.scom in this case), and positions read-line to next to 'scom_enscom openap.scom', i.e. it will now read line 'scom_enscom wpa2ap.scom' and so on till scom FIFO is complete

# 2. Daisy Chain - a mother scom will call to child1 scom file. child1 scom calls to child2 scom at it's EOF and so on. 
# e.g. Daisy Chain below
# example.scom is mother scom with EOF content below
scom_enscom openap.scom
# openap.scom EOF content below
scom_enscom wpa2ap.scom
# wpa2ap.scom EOF content below
scom_enscom wpa3ap.scom
# For above, script sees 'scom_enscom openap.scom' and switches to openap.scom and inside openap.scom it will encounter 'scom_enscom wpa2ap.scom' and switches to wpa2ap.scom and so on.

# 3. Hybrid Chain -  a Hybrid model created by mixing FIFO model with Daisy-chain models, if carefully used, it would work as expected.

